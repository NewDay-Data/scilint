# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/example_nbs/test_data_handling.ipynb.

# %% auto 0
__all__ = ['int_param', 'float_param', 'str_param', 'input_path', 'model_path', 'dict_param', 'list_param', 'ones', 'text',
           'series_param', 'df_param', 'scalar', 'py_advanced', 'pandas']

# %% ../../nbs/example_nbs/test_data_handling.ipynb 2
from pathlib import Path
from typing import Any, Dict, List

import numpy as np
import pandas as pd

# %% ../../nbs/example_nbs/test_data_handling.ipynb 3
int_param = 3
float_param = 1.1
str_param = "Sciflow ðŸ”¬"
input_path = Path(".").resolve()
model_path = Path(".").resolve().parent
dict_param = {"a": {"b": {"c": "abc"}}, "another_key": [1, 2, 3]}
list_param = [i for i in range(10**4)]
ones = np.ones(10**7)
text = np.repeat("some string that takess space and more of it", 10**7)
series_param = pd.Series(text)
df_param = pd.DataFrame({"a": ones, "b": ones, "c": ones, "d": text})

# %% ../../nbs/example_nbs/test_data_handling.ipynb 4
def scalar(int_param: int, float_param: float, str_param: str):
    print(f"int_param: {int_param}")
    print(f"float_param: {float_param}")
    print(f"str_param: {str_param}")
    results = {"int_param": int_param}
    return results

# %% ../../nbs/example_nbs/test_data_handling.ipynb 6
def py_advanced(input_path: Path, list_param: List[int], dict_param: Dict[str, Any]):
    print(f"input_path: {input_path}")
    print(f"input_path: {list_param[:10]}")
    print(f"input_path: {dict_param}")

# %% ../../nbs/example_nbs/test_data_handling.ipynb 8
def pandas(series_param: pd.Series, df_param: pd.DataFrame):
    print(f"series: {series_param.shape}")
    print(f"df: {df_param.shape}")
